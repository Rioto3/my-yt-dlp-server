// content.js
/*
 * YouTube MP3„ÉÄ„Ç¶„É≥„É≠„Éº„ÉÄ„Éº + „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà Content Script
 * 
 * Ë®≠Ë®àÊÄùÊÉ≥Ôºö
 * - YouTubeÂãïÁîª/„Éó„É¨„Ç§„É™„Çπ„Éà„Éö„Éº„Ç∏„Åä„Çà„Å≥Ê§úÁ¥¢ÁµêÊûú„Éö„Éº„Ç∏„Å´MP3„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éú„Çø„É≥„Å®„Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà„Éú„Çø„É≥„ÇíËøΩÂä†„Åô„ÇãContent Script
 * - „Ç∑„É≥„Éó„É´„Åß‰øùÂÆàÊÄß„ÅÆÈ´ò„ÅÑ„ÇØ„É©„Çπ„Éô„Éº„Çπ„ÅÆ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíÊé°Áî®
 * - ÂêÑ„ÇØ„É©„Çπ„ÅØÂçò‰∏ÄË≤¨‰ªª„ÅÆÂéüÂâá„Å´Âæì„ÅÑ„ÄÅÊòéÁ¢∫„Å™ÂΩπÂâ≤„ÇíÊåÅ„Å§
 * 
 * ‰∏ªË¶Å„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºö
 * - Config: Ë®≠ÂÆöÂÄ§„ÅÆÈõÜÁ¥Ñ„Å´„Çà„Çã‰øùÂÆàÊÄß„ÅÆÂêë‰∏ä
 * - FileUtils: „Éï„Ç°„Ç§„É´Êìç‰Ωú„Å´Èñ¢„Åô„ÇãÂÖ±ÈÄöÂá¶ÁêÜ
 * - AudioExtractorService: API„Å®„ÅÆÈÄö‰ø°„ÇíÊãÖÂΩì
 * - TranscriptService: „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„ÉàÂèñÂæó„Å®„ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâÊìç‰Ωú„ÇíÊãÖÂΩì
 * - DownloadManager: „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂá¶ÁêÜ„ÅÆÁµ±ÂêàÁÆ°ÁêÜ
 * - MP3ButtonManager: UI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å®„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆÁÆ°ÁêÜ
 * - SearchResultsButtonManager: Ê§úÁ¥¢ÁµêÊûú„Éö„Éº„Ç∏„ÅÆ„Éú„Çø„É≥ÁÆ°ÁêÜ
 * 
 * Êã°ÂºµÊÄßÔºö
 * - Êñ∞Ê©üËÉΩ„ÅÆËøΩÂä†„ÅåÂÆπÊòì„Å™ÊßãÈÄ†
 * - API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅÆËøΩÂä†„ÇÑÂ§âÊõ¥„ÅåË®≠ÂÆö„ÅßÂÆåÁµê
 * - UIË¶ÅÁ¥†„ÅÆËøΩÂä†„ÇÑÂ§âÊõ¥„ÅåÂàÜÈõ¢„Åï„Çå„ÅüÂΩ¢„ÅßÂèØËÉΩ
 */

// Ë®≠ÂÆö„ÅÆÂêçÂâçÁ©∫Èñì
const Config = {
  API: {
    BASE_URL: 'http://localhost:7783/api/v1',
    ENDPOINTS: {
      EXTRACT_AUDIO: '/extract-audio',
      EXTRACT_ALBUM: '/extract-album',
      EXTRACT_TRANSCRIPT: '/extract-transcript'  // Êñ∞Ë¶èËøΩÂä†
    }
  },
  UI: {
    BUTTON_STYLES: `
      .mp3-save-btn, .transcript-btn {
        display: block;
        margin: 10px auto;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        color: white;
      }
      .mp3-save-btn:hover, .transcript-btn:hover {
        filter: brightness(0.95);
      }
      .mp3-save-btn.loading, .transcript-btn.loading {
        background-color: #ccc;
        cursor: wait;
      }
      .mp3-save-btn-search, .transcript-btn-search {
        display: inline-block;
        margin: 5px 0;
        padding: 8px 16px;
        font-size: 0.9em;
      }
      .transcript-btn {
        background-color: #1976d2;
      }
      .transcript-btn:hover {
        background-color: #1565c0;
      }
      .transcript-btn.success {
        background-color: #4caf50;
      }
      .transcript-btn.error {
        background-color: #f44336;
      }
    `,
    CONTAINER_SELECTORS: [
      'div#actions.ytd-video-primary-info-renderer',
      'div#actions-inner',
      'ytd-video-primary-info-renderer #actions',
      '#top-row.ytd-video-primary-info-renderer'
    ],
    SEARCH_RESULT_SELECTORS: {
      VIDEO_ITEMS: 'ytd-video-renderer',
      BUTTON_CONTAINER: '#meta',
      METADATA_CONTAINER: '#metadata-line'
    }
  }
};

// „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„ÇØ„É©„Çπ
class FileUtils {
  static getFilenameFromResponse(response) {
    const disposition = response.headers.get('content-disposition');
    if (!disposition) return 'downloaded.mp3';

    const utf8Match = /filename\*=UTF-8''(.+)/.exec(disposition);
    if (utf8Match?.[1]) {
      return decodeURIComponent(utf8Match[1]);
    }

    const standardMatch = /filename="(.+)"/.exec(disposition);
    return standardMatch?.[1] || 'downloaded.mp3';
  }

  static async downloadBlob(blob, filename) {
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = filename;
    link.click();
    window.URL.revokeObjectURL(link.href);
  }

  static getVideoIdFromElement(element) {
    const videoLink = element.querySelector('a#video-title');
    if (!videoLink) return null;
    
    const href = videoLink.href;
    const match = href.match(/[?&]v=([^&]+)/);
    return match ? match[1] : null;
  }

  static showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 4px;
      color: white;
      font-weight: 500;
      z-index: 10000;
      transition: opacity 0.3s;
      ${type === 'success' ? 'background: #4caf50;' : ''}
      ${type === 'error' ? 'background: #f44336;' : ''}
      ${type === 'info' ? 'background: #2196f3;' : ''}
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // 3ÁßíÂæå„Å´ÂâäÈô§
    setTimeout(() => {
      notification.style.opacity = '0';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
}

// API„Çµ„Éº„Éì„Çπ„ÇØ„É©„Çπ
class AudioExtractorService {
  async extractAudio(url, endpoint) {
    const response = await fetch(`${Config.API.BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': '*/*'
      },
      body: JSON.stringify({ url })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || 'Èü≥Â£∞ÊäΩÂá∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }

    return response;
  }
}

// „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà„Çµ„Éº„Éì„Çπ„ÇØ„É©„Çπ
class TranscriptService {
  async extractTranscript(url) {
    const response = await fetch(`${Config.API.BASE_URL}${Config.API.ENDPOINTS.EXTRACT_TRANSCRIPT}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({ url })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || '„Éà„É©„É≥„Çπ„ÇØ„É™„Éó„ÉàÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }

    const result = await response.json();
    return result.transcript;
  }

  async copyToClipboard(text) {
    try {
      await navigator.clipboard.writeText(text);
      return true;
    } catch (error) {
      console.error('„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å∏„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó:', error);
      return false;
    }
  }

  async handleTranscriptRequest(button, videoId = null) {
    const originalText = button.textContent;
    
    try {
      // „Éú„Çø„É≥„ÇíÂá¶ÁêÜ‰∏≠Áä∂ÊÖã„Å´Â§âÊõ¥
      button.classList.add('loading');
      button.textContent = '‚è≥ Âá¶ÁêÜ‰∏≠...';
      
      // URL„ÇíÊßãÁØâ
      const url = videoId 
        ? `https://www.youtube.com/watch?v=${videoId}`
        : window.location.href;
      
      // „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„ÉàÂèñÂæó
      const transcript = await this.extractTranscript(url);
      
      // „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº
      const copySuccess = await this.copyToClipboard(transcript);
      
      if (copySuccess) {
        // ÊàêÂäüÁä∂ÊÖã
        button.classList.remove('loading');
        button.classList.add('success');
        button.textContent = '‚úÖ „Ç≥„Éî„ÉºÂÆå‰∫Ü!';
        
        FileUtils.showNotification('„Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü!', 'success');
      } else {
        throw new Error('„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å∏„ÅÆ„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
      
    } catch (error) {
      console.error('„Éà„É©„É≥„Çπ„ÇØ„É™„Éó„ÉàÂèñÂæó„Ç®„É©„Éº:', error);
      
      // „Ç®„É©„ÉºÁä∂ÊÖã
      button.classList.remove('loading');
      button.classList.add('error');
      button.textContent = '‚ùå „Ç®„É©„Éº';
      
      FileUtils.showNotification(`„Ç®„É©„Éº: ${error.message}`, 'error');
    } finally {
      // 3ÁßíÂæå„Å´ÂÖÉ„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
      setTimeout(() => {
        button.classList.remove('loading', 'success', 'error');
        button.textContent = originalText;
      }, 3000);
    }
  }
}

// „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÁÆ°ÁêÜ„ÇØ„É©„Çπ
class DownloadManager {
  constructor() {
    this.service = new AudioExtractorService();
  }

  async handleDownload(button, endpoint, successMessage, videoId = null) {
    const originalText = button.textContent;
    try {
      button.classList.add('loading');
      button.textContent = '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰∏≠...';

      const url = videoId 
        ? `https://www.youtube.com/watch?v=${videoId}`
        : window.location.href;

      const response = await this.service.extractAudio(
        url,
        endpoint
      );

      const blob = await response.blob();
      const filename = FileUtils.getFilenameFromResponse(response);
      await FileUtils.downloadBlob(blob, filename);

      alert(successMessage);
    } catch (error) {
      console.error('Èü≥Â£∞ÊäΩÂá∫„Ç®„É©„Éº:', error);
      alert(`„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`);
    } finally {
      button.classList.remove('loading');
      button.textContent = originalText;
    }
  }
}

// Ê§úÁ¥¢ÁµêÊûú„Éö„Éº„Ç∏„ÅÆ„Éú„Çø„É≥ÁÆ°ÁêÜ„ÇØ„É©„Çπ
class SearchResultsButtonManager {
  constructor() {
    this.downloadManager = new DownloadManager();
    this.transcriptService = new TranscriptService();
  }

  createSearchResultButton(videoId, type = 'mp3') {
    const button = document.createElement('button');
    
    if (type === 'mp3') {
      button.textContent = 'MP3„Çí‰øùÂ≠ò';
      button.classList.add('mp3-save-btn', 'mp3-save-btn-search');
      button.style.backgroundColor = '#4CAF50';
      
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.downloadManager.handleDownload(
          button,
          Config.API.ENDPOINTS.EXTRACT_AUDIO,
          'MP3„Éï„Ç°„Ç§„É´„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü',
          videoId
        );
      });
    } else if (type === 'transcript') {
      button.textContent = 'üìÑ „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà';
      button.classList.add('transcript-btn', 'transcript-btn-search');
      button.style.backgroundColor = '#1976d2';
      
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.transcriptService.handleTranscriptRequest(button, videoId);
      });
    }

    return button;
  }

  addButtonToSearchResult(videoElement) {
    // Êó¢„Å´„Éú„Çø„É≥„ÅåËøΩÂä†„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    if (videoElement.querySelector('.mp3-save-btn') || videoElement.querySelector('.transcript-btn')) {
      return;
    }

    const videoId = FileUtils.getVideoIdFromElement(videoElement);
    if (!videoId) {
      return;
    }

    const metadataContainer = videoElement.querySelector(
      Config.UI.SEARCH_RESULT_SELECTORS.METADATA_CONTAINER
    );
    if (!metadataContainer) {
      return;
    }

    // MP3„Éú„Çø„É≥„Å®„Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà„Éú„Çø„É≥„ÇíËøΩÂä†
    const mp3Button = this.createSearchResultButton(videoId, 'mp3');
    const transcriptButton = this.createSearchResultButton(videoId, 'transcript');
    
    metadataContainer.appendChild(mp3Button);
    metadataContainer.appendChild(transcriptButton);
  }

  processSearchResults() {
    const videoItems = document.querySelectorAll(
      Config.UI.SEARCH_RESULT_SELECTORS.VIDEO_ITEMS
    );
    videoItems.forEach(item => this.addButtonToSearchResult(item));
  }
}

// „É°„Ç§„É≥„ÅÆÊ©üËÉΩ„ÇíÁÆ°ÁêÜ„Åô„Çã„ÇØ„É©„Çπ
class MP3ButtonManager {
  constructor() {
    this.downloadManager = new DownloadManager();
    this.transcriptService = new TranscriptService();
  }

  createButton(id, text, backgroundColor, buttonClass = 'mp3-save-btn') {
    const button = document.createElement('button');
    button.id = id;
    button.textContent = text;
    button.classList.add(buttonClass);
    if (backgroundColor) {
      button.style.backgroundColor = backgroundColor;
    }
    return button;
  }

  addStyles() {
    const existingStyle = document.getElementById('mp3-button-styles');
    if (!existingStyle) {
      const style = document.createElement('style');
      style.id = 'mp3-button-styles';
      style.textContent = Config.UI.BUTTON_STYLES;
      document.head.appendChild(style);
    }
  }

  findContainer() {
    for (const selector of Config.UI.CONTAINER_SELECTORS) {
      const container = document.querySelector(selector);
      if (container) {
        return container;
      }
    }
    return null;
  }

  initialize() {
    // Êó¢„Å´ËøΩÂä†„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    if (document.getElementById('mp3-save-button')) {
      return;
    }

    const container = this.findContainer();
    if (!container) {
      return;
    }

    this.addStyles();

    // ÂçòÊõ≤„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éú„Çø„É≥
    const singleButton = this.createButton(
      'mp3-save-button',
      'MP3„Çí‰øùÂ≠ò',
      '#4CAF50'
    );
    singleButton.addEventListener('click', () =>
      this.downloadManager.handleDownload(
        singleButton,
        Config.API.ENDPOINTS.EXTRACT_AUDIO,
        'MP3„Éï„Ç°„Ç§„É´„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü'
      )
    );

    // „Éó„É¨„Ç§„É™„Çπ„Éà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éú„Çø„É≥
    const playlistButton = this.createButton(
      'mp3-save-button-2',
      '„Éó„É¨„Ç§„É™„Çπ„Éà„ÅÆÂÖ®„Å¶„ÅÆÊõ≤„Çí‰øùÂ≠ò',
      '#007BFF'
    );
    playlistButton.addEventListener('click', () =>
      this.downloadManager.handleDownload(
        playlistButton,
        Config.API.ENDPOINTS.EXTRACT_ALBUM,
        '„Éó„É¨„Ç§„É™„Çπ„Éà„ÅÆÂÖ®„Å¶„ÅÆÊõ≤„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü'
      )
    );

    // „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà„Éú„Çø„É≥ÔºàÊñ∞Ë¶èËøΩÂä†Ôºâ
    const transcriptButton = this.createButton(
      'transcript-save-button',
      'üìÑ „Éà„É©„É≥„Çπ„ÇØ„É™„Éó„Éà',
      '#1976d2',
      'transcript-btn'
    );
    transcriptButton.addEventListener('click', () =>
      this.transcriptService.handleTranscriptRequest(transcriptButton)
    );

    // „Éú„Çø„É≥„ÇíËøΩÂä†
    container.appendChild(singleButton);
    container.appendChild(playlistButton);
    container.appendChild(transcriptButton);
  }
}

// „É°„Ç§„É≥Âá¶ÁêÜ
const buttonManager = new MP3ButtonManager();
const searchResultsManager = new SearchResultsButtonManager();

function initializeButtons() {
  buttonManager.addStyles();
  
  // ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏URL„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const isSearchPage = window.location.pathname === '/results';
  
  if (isSearchPage) {
    searchResultsManager.processSearchResults();
  } else {
    buttonManager.initialize();
  }
}

// ÂàùÊúüÂåñÂá¶ÁêÜ„ÅÆÂÆüË°å
initializeButtons();

// DOM„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
const observer = new MutationObserver((mutations) => {
  const isSearchPage = window.location.pathname === '/results';
  
  if (isSearchPage) {
    searchResultsManager.processSearchResults();
  } else {
    if (!document.getElementById('mp3-save-button')) {
      buttonManager.initialize();
    }
  }
});

// „Ç™„Éñ„Ç∂„Éº„Éê„Éº„ÅÆË®≠ÂÆö
observer.observe(document.body, {
  childList: true,
  subtree: true
});

// ÈÅÖÂª∂ÂÆüË°å„Å´„Çà„ÇãÂàùÊúüÂåñ
setTimeout(() => initializeButtons(), 1000);